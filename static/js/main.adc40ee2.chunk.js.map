{"version":3,"sources":["components/header.js","components/gallery.js","App.js","serviceWorker.js","index.js"],"names":["HeaderExamplePage","props","react_default","a","createElement","className","score","Gallery","src","key","id","clicked","alt","onClick","App","state","images","selected","handleClick","array","console","log","_this","indexOf","gameOver","push","shuffleImages","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","setState","alert","this","_this2","header","map","i","gallery","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+3BASeA,SAPW,SAACC,GAAD,OACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMK,iBCWPC,MAdf,SAAiBN,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OACAI,IAAKP,EAAMO,IACXC,IAAKR,EAAMS,GACXC,QAASV,EAAMU,QACfC,IAAKX,EAAMW,IACXC,QAASZ,EAAMY,YCsDNC,6MAxDbC,MAAQ,CACNC,OAAQA,EAERV,MAAO,EACPW,SAAU,MAGZC,YAAc,SAACC,EAAOV,GACpBW,QAAQC,IAAIC,EAAKP,MAAME,SAAUR,IACK,IAAtCa,EAAKP,MAAME,SAASM,QAAQd,GAAca,EAAKP,MAAMT,QAAUgB,EAAKE,WACpEF,EAAKP,MAAME,SAASQ,KAAKhB,GACzBa,EAAKI,cAAcP,MAGrBO,cAAgB,SAACP,GAIf,IAHA,IAAiCQ,EAAgBC,EAA7CC,EAAeV,EAAMW,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBR,EAHjBU,GAAgB,GAIhBV,EAAMU,GAAgBV,EAAMS,GAC5BT,EAAMS,GAAeD,EAEvBL,EAAKY,SAAS,CAAClB,OAAQG,+EAIvBgB,MAAM,aACNC,KAAKF,SAAS,CAAC5B,MAAO,IACtB8B,KAAKF,SAAS,CAACjB,SAAU,sCAIlB,IAAAoB,EAAAD,KACP,OACClC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACkC,EAAD,CACEhC,MAAO8B,KAAKrB,MAAMT,QAEnB8B,KAAKrB,MAAMC,OAAOuB,IAAI,SAAAC,GAAC,OAAItC,EAAAC,EAAAC,cAACqC,EAAD,CAC1BjC,IAAKgC,EAAEhC,IACPC,IAAK+B,EAAE9B,GACPE,IAAK4B,EAAE5B,IACPC,QAAS,kBAAMwB,EAAKnB,YAAYF,EAAQwB,EAAE9B,iBAnDhCgC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.adc40ee2.chunk.js","sourcesContent":["import React from 'react';\n\nconst HeaderExamplePage = (props) => (\n  <div className=\"header\">\n    <h1>Clicky Game With Plants</h1>\n    <h2>Score: {props.score}</h2>\n  </div>\n)\n\nexport default HeaderExamplePage","import React from \"react\";\n\nfunction Gallery(props) {\n  return(\n    <div className=\"content\">\n      <img \n      src={props.src}\n      key={props.id}\n      clicked={props.clicked}\n      alt={props.alt}\n      onClick={props.onClick}\n      ></img>\n    </div>\n  )\n}\n\nexport default Gallery;","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport images from \"./images.json\";\nimport Gallery from \"./components/gallery\";\n\nclass App extends React.Component {\n\n  state = {\n    images: images,\n    // selected: [], // indexes which have been selected\n    score: 0,\n    selected: [] \n  };\n\n  handleClick = (array, key) => {\n    console.log(this.state.selected, key);\n    this.state.selected.indexOf(key) === -1 ? this.state.score++ : this.gameOver();\n    this.state.selected.push(key);\n    this.shuffleImages(array);\n  }\n\n  shuffleImages = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({images: array}); \n  }\n\n  gameOver() {\n    alert(\"Game Over\");\n    this.setState({score: 0});\n    this.setState({selected: []});\n  }\n\n\n  render() {\n    return (\n     <div className=\"grid\">\n      <Header \n        score={this.state.score}\n      />\n      {this.state.images.map(i => <Gallery \n        src={i.src}\n        key={i.id} \n        alt={i.alt}\n        onClick={() => this.handleClick(images, i.id)}\n      />)}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}